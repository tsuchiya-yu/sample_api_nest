type UserProfile {
  id: Int!
  userId: Int!
  shopMstCode: String
  catchphrase: String
  introduction: String
  createdAt: String!
  updatedAt: String!
  user: User
  shopMst: ShopMst
}

input CreateUserProfileInput {
  catchphrase: String
  introduction: String
  user: UserCreateNestedOneWithoutUserProfileInput!
  shopMst: ShopMstCreateNestedOneWithoutUserProfilesInput
}

input UpdateUserProfileInput {
  catchphrase: String
  introduction: String
  shopMst: ShopMstUpdateOneWithoutUserProfilesInput
}

type Query {
  userProfile(id: Int!): UserProfile
  userProfiles: [UserProfile!]
}

type Mutation {
  createUserProfile(data: CreateUserProfileInput!): UserProfile!
  updateUserProfile(id: Int!, data: UpdateUserProfileInput!): UserProfile!
}

input UserCreateNestedOneWithoutUserProfileInput {
  connect: UserWhereUniqueInput
}

input UserWhereUniqueInput {
  email: String
}

input ShopMstCreateNestedOneWithoutUserProfilesInput {
  connect: ShopMstWhereUniqueInput
}

input ShopMstWhereUniqueInput {
  code: String
}

input ShopMstUpdateOneWithoutUserProfilesInput {
  connect: ShopMstConnectInput
}

input ShopMstConnectInput {
  code: String
}